# -*- coding: utf-8 -*-
"""DCGAN

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13cNDwPvB-mxiaBYlY30cWagbgCdG2gQC
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd

import matplotlib
import matplotlib.pyplot as plt

import torch
import torch.nn as nn
import torch.optim as optim
import torchvision.datasets as dsets
import torchvision.transforms as transforms

batch_size = 128
image_size = 64
nc = 1
nz = 100
ngf = 64
ndf = 64
num_epochs = 20
lr = 0.0002
beta1 = 0.5

device = torch.device('cuda')

# standardizer
standardizer = transforms.Compose([
                                    transforms.Resize(image_size),
                                    transforms.ToTensor(),
                                    transforms.Normalize(mean=0.5, std=0.5)])

dataset = dsets.MNIST(root='../data/', train=True, transform=standardizer, download=True)

# Data loader
dataloader = torch.utils.data.DataLoader(dataset, batch_size, shuffle=True)

# function for visualization
def tc_imshow(img, lbl=""):
    if img.size(0) == 1:
        plt.imshow(img.squeeze(), cmap='gray')
    else:
        plt.imshow(np.transpose(img, (1, 2, 0)))

    plt.title(lbl)
    plt.axis('off')

# visualize
mini_batch_img, mini_batch_lbl = next(iter(dataloader))

# plt.figure(figsize=(4,5))
# for i in range(100):
#     plt.subplot(10,10,i+1)
#     tc_imshow(img=mini_batch_img[i] /2+0.5)
#             #   lbl=train_data.classes[mini_batch_lbl[i].numpy()])
#     plt.axis('off')

# plt.figure(figsize=(10, 10))
# plt.imshow(np.transpose(vutils.make_grid(real_batch[0].to(device)[:64], padding=2, normalize=True).cpu(),(1,2,0)))

# Random sampling from uniform distribution
def random_sample_z_space(batch_size=1, nz=100):
    return torch.rand(batch_size, nz, 1, 1, device=device)

# hyper-paremeters
dim_G_last2_channel = 100
dim_output = 1

def weights_init(m):
    classname = m.__class__.__name__

    if classname.find('Conv') != -1:
        nn.init.normal_(m.weight.data, 0.0, 0.02)
    elif classname.find('BatchNorm') != -1:
        nn.init.normal_(m.weight.data, 1.0, 0.02)
        nn.init.constant_(m.bias.data, 0)

class Generator(nn.Module): 
    def __init__(self): 
        super(Generator, self).__init__()
        self.main = nn.Sequential( 
            # input : z 벡터 
            nn.ConvTranspose2d(in_channels=nz,out_channels=ngf*8,kernel_size=4,stride=1,padding=0, bias=False),
            nn.BatchNorm2d(ngf*8),
            nn.ReLU(True),

            nn.ConvTranspose2d(ngf*8,ngf*4,4,2,1,bias=False),
            nn.BatchNorm2d(ngf*4),
            nn.ReLU(True),

            nn.ConvTranspose2d(ngf*4,ngf*2,4,2,1,bias=False),
            nn.BatchNorm2d(ngf*2),
            nn.ReLU(True),

            nn.ConvTranspose2d(ngf*2,ngf,4,2,1,bias=False),
            nn.BatchNorm2d(ngf),
            nn.ReLU(True),

            nn.ConvTranspose2d(ngf,nc,4,2,1,bias=False),
            nn.Tanh()
        )
    def forward(self, input):
        return self.main(input)

netG = Generator().to('cuda')
netG.apply(weights_init)

class Discriminator(nn.Module): 
    def __init__(self): 
        super(Discriminator, self).__init__()
        self.main = nn.Sequential( 
            nn.Conv2d(nc,ndf,4,2,1,bias=False),
            nn.LeakyReLU(0.1,inplace=True),

            nn.Conv2d(ndf,ndf*2,4,2,1,bias=False),
            nn.BatchNorm2d(ndf*2),
            nn.LeakyReLU(0.1,inplace=True),

            nn.Conv2d(ndf*2,ndf*4,4,2,1,bias=False),
            nn.BatchNorm2d(ndf*4),
            nn.LeakyReLU(0.1,inplace=True),

            nn.Conv2d(ndf*4,ndf*8,4,2,1,bias=False),
            nn.BatchNorm2d(ndf*8),
            nn.LeakyReLU(0.1,inplace=True),

            nn.Conv2d(ndf*8,1,4,1,0,bias=False),
            nn.Sigmoid()
        )
    def forward(self, input):
        return self.main(input)

netD = Discriminator().to('cuda')
netD.apply(weights_init)

criterion = nn.BCELoss()

fixed_noise = torch.randn(100, nz, 1, 1, device='cuda')

real_label = 1
fake_label = 0

optimizerD = optim.Adam(netD.parameters(), lr=lr, betas=(beta1,0.999))
optimizerG = optim.Adam(netG.parameters(), lr=lr, betas=(beta1,0.999))

# Commented out IPython magic to ensure Python compatibility.
img_list = [] 
G_losses = [] 
D_losses = [] 
iters = 0
device = 'cuda'
print("Starting Training Loop...")

import cv2
import os
from torchvision.transforms.functional import to_pil_image
from PIL import Image

for epoch in range(num_epochs):
    # For each batch in the dataloader
    for i, data in enumerate(dataloader, 0):

        ############################
        # (1) Update D network: maximize log(D(x)) + log(1 - D(G(z)))
        ###########################
        ## Train with all-real batch
        netD.zero_grad()
        # Format batch
        real_cpu = data[0].to(device)
        b_size = real_cpu.size(0)
        label = torch.full((b_size,), real_label, dtype=torch.float, device=device)
        # Forward pass real batch through D
        output = netD(real_cpu).view(-1)
        # Calculate loss on all-real batch
        errD_real = criterion(output, label)
        # Calculate gradients for D in backward pass
        errD_real.backward()
        D_x = output.mean().item()

        ## Train with all-fake batch
        # Generate batch of latent vectors
        noise = torch.randn(b_size, nz, 1, 1, device=device)
        # Generate fake image batch with G
        fake = netG(noise)
        label.fill_(fake_label)
        # Classify all fake batch with D
        output = netD(fake.detach()).view(-1)
        # Calculate D's loss on the all-fake batch
        errD_fake = criterion(output, label)
        # Calculate the gradients for this batch, accumulated (summed) with previous gradients
        errD_fake.backward()
        D_G_z1 = output.mean().item()
        # Compute error of D as sum over the fake and the real batches
        errD = errD_real + errD_fake
        # Update D
        optimizerD.step()

        ############################
        # (2) Update G network: maximize log(D(G(z)))
        ###########################
        netG.zero_grad()
        label.fill_(real_label)  # fake labels are real for generator cost
        # Since we just updated D, perform another forward pass of all-fake batch through D
        output = netD(fake).view(-1)
        # Calculate G's loss based on this output
        errG = criterion(output, label)
        # Calculate gradients for G
        errG.backward()
        D_G_z2 = output.mean().item()
        # Update G
        optimizerG.step()

        # Output training stats
        if i % 100 == 0:
            print('[%d/%d][%d/%d]\tLoss_D: %.4f\tLoss_G: %.4f\tD(x): %.4f\tD(G(z)): %.4f / %.4f'
#                   % (epoch, num_epochs, i, len(dataloader),
                     errD.item(), errG.item(), D_x, D_G_z1, D_G_z2))

        # Save Losses for plotting later
        G_losses.append(errG.item())
        D_losses.append(errD.item())

        # Check how the generator is doing by saving G's output on fixed_noise
        if (iters % 500 == 0) or ((epoch == num_epochs-1) and (i == len(dataloader)-1)):
            with torch.no_grad():
                fake = netG(fixed_noise).detach().cpu()
            img_list.append(fake)

        iters += 1

    # fig = plt.figure(figsize=(10,10))

    # if ((epoch+1) % 10 == 0):
    #     print("-----------save images-----------")
    #     for j in range(100):
    #         subplot = fig.add_subplot(10,10,j+1)
    #         subplot.set_xticklabels([])
    #         subplot.set_yticklabels([])
    #         subplot.imshow(to_pil_image(0.5*img_list[-1][j]/2 + 0.5), cmap='gray')
    #         subplot.axis('off')
            
    #     fig.savefig("/content/drive/MyDrive/CS492_vision/result/epoch"+str(epoch)+".png")

    #     for k in range(100):
    #         plt.figure(figsize=(3.5,3.5))
    #         plt.imshow(to_pil_image(0.5*img_list[-1][k]/2 + 0.5), cmap='gray')
    #         plt.savefig("/content/drive/MyDrive/CS492_vision/data/crop_img/"+str(epoch)+"/"+str(k)+".png")
    #         plt.axis('off')

fig = plt.figure(figsize=(10,10))

for j in range(100):
    subplot = fig.add_subplot(10,10,j+1)
    subplot.set_xticklabels([])
    subplot.set_yticklabels([])
    subplot.imshow(to_pil_image(0.5*img_list[-1][j]/2 + 0.5), cmap='gray')
    subplot.axis('off')
    
fig.savefig("/content/drive/MyDrive/CS492_vision/result/rrelu_0.1"+".png")

plt.figure(figsize=(10, 5))
plt.title("Generator and Discriminator Loss")
plt.plot(G_losses, label = "G")
plt.plot(D_losses, label = "D")

plt.xlabel("iterations")
plt.ylabel('Loss')
plt.legend()
plt.show()

for j in range(100):
    plt.figure(figsize=(3.5,3.5))
    plt.imshow(to_pil_image(0.5*img_list[-1][j]/2 + 0.5), cmap='gray')
    plt.savefig("/content/drive/MyDrive/CS492_vision/data/crop_img/"+str(j)+".png")
    plt.axis('off')
    
plt.show()

# img_array = np.array([t.numpy() for t in img_list])
# img_array.shape

# in epoch 5, (6, 64, 1, 64, 64)
# img 64개 생성, 각각의 shape 1, 64, 64

# Commented out IPython magic to ensure Python compatibility.
# from google.colab import drive
# drive.mount('/content/drive')
# %cd drive/MyDrive/CS492_vision
!ls

import os,sys
import imageio
import numpy as np
import argparse
import math
from resnet import ResNet18
import torchvision.transforms as transforms
import torch
import cv2 as cv
import glob as glob
from numpy import clip

from skimage.transform import resize
from google.colab.patches import cv2_imshow

in_path = "./data/"
out_path = in_path + "crop_img/"
input_image_dir = out_path
model_dir = "mnist_model_10.ckpt"
img_size = 28
batch_size = 34
channel = 1
num_splits = 10

GPUID = 0
os.environ["CUDA_VISIBLE_DEVICES"] = str(GPUID)
print ("PACKAGES LOADED")

def load_images(image_dir):
    images = []
    for fn in os.listdir(image_dir):
        ext = os.path.splitext(fn)[1].lower()
        img_path = os.path.join(image_dir, fn)
        img = imageio.imread(img_path)
        img = resize(img, (28, 28))
        img = img[:, :, 0]
        # print(np.array(img).shape)
        # calculate per-channel means and standard deviations
        means = img.mean(axis=(0, 1), dtype='float64')
        stds = img.std(axis=(0, 1), dtype='float64')
        # per-channel standardization of pixels
        pixels = (img - means) / stds
        pixels = clip(pixels, -1.0, 1.0)
        images.append(pixels)
    # print(np.array(images).shape)
    return images


def softmax(x):
    """Compute softmax values for each sets of scores in x."""
    e_x = np.exp(x - np.max(x))
    return e_x / np.expand_dims(e_x.sum(axis=1), axis=1)   # only difference


def preds2score(preds, splits=10):
    scores = []
    for i in range(splits):
        part = preds[(i * preds.shape[0] // splits):((i + 1) * preds.shape[0] // splits), :]
        kl = part * (np.log(part) - np.log(np.expand_dims(np.mean(part, 0), 0)))
        kl = np.mean(np.sum(kl, 1))
        scores.append(np.exp(kl))
    return np.mean(scores), np.std(scores)

def get_inception_score(images):
    splits = num_splits
    inps = []
    input_transform = transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
    for img in images:
        img = img.astype(np.float32)
        inps.append(np.expand_dims(img, 0))
    preds = []
    n_batches = 2
    n_preds = 0

    net = ResNet18().cuda()
    net.load_state_dict(torch.load(model_dir))
    print("load model successfully")
    
    for i in range(n_batches):
        sys.stdout.write(".")
        sys.stdout.flush()
        inp = inps[(i * batch_size):min((i + 1) * batch_size, len(inps))]
        inp = np.concatenate(inp, 0)
        inp = np.expand_dims(inp, axis=1)
        inp = torch.from_numpy(inp).cuda()
        outputs = net(inp)
        pred = outputs.data.tolist()
        #pred = softmax(pred)
        preds.append(pred)
        n_preds += outputs.shape[0]
    preds = np.concatenate(preds, 0)
    preds = np.exp(preds) / np.sum(np.exp(preds), 1, keepdims=True)
    mean_, std_ = preds2score(preds, splits)
    return mean_, std_


images = load_images(input_image_dir)
mean, std = get_inception_score(images)
print('\nInception mean: ', mean)
print('Inception std: ', std)